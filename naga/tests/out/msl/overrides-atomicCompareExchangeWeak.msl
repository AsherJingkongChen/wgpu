// language: metal1.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct _atomic_compare_exchange_resultUint4_ {
    uint old_value;
    bool exchanged;
};

namespace metal {
    template <
        typename _E = typename enable_if<
            _valid_compare_exchange_type<threadgroup uint *>::value
        >::type
    >
    METAL_FUNC _atomic_compare_exchange_resultUint4_ atomic_naga_atomic_compare_exchange_weak_explicit(
        volatile threadgroup _atomic<uint> *object,
        thread uint *expected,
        uint desired,
        memory_order success
    )
        METAL_CONST_ARG(success)
        METAL_COMPATIBLE_COMPARE_EXCHANGE_ORDERS(success, metal::memory_order_relaxed)
    {
        uint next_expected(*expected);
        bool swapped = __metal_atomic_compare_exchange_weak_explicit(
            &object->__s,
            &next_expected,
            desired,
            int(success),
            int(metal::memory_order_relaxed),
            __METAL_MEMORY_SCOPE_THREADGROUP__
        );
        return _atomic_compare_exchange_resultUint4_{
            *expected = uint(next_expected),
            swapped
        };
    }
    template <
        typename _E = typename enable_if<
            _valid_compare_exchange_type<device uint *>::value
        >::type
    >
    METAL_FUNC _atomic_compare_exchange_resultUint4_ atomic_naga_atomic_compare_exchange_weak_explicit(
        volatile device _atomic<uint> *object,
        thread uint *expected,
        uint desired,
        memory_order success
    )
        METAL_CONST_ARG(success)
        METAL_COMPATIBLE_COMPARE_EXCHANGE_ORDERS(success, metal::memory_order_relaxed)
    {
        uint next_expected(*expected);
        bool swapped = __metal_atomic_compare_exchange_weak_explicit(
            &object->__s,
            &next_expected,
            desired,
            int(success),
            int(metal::memory_order_relaxed),
            __METAL_MEMORY_SCOPE_DEVICE__
        );
        return _atomic_compare_exchange_resultUint4_{
            *expected = uint(next_expected),
            swapped
        };
    }
}
constant int o = 2;

kernel void f(
  metal::uint3 __local_invocation_id [[thread_position_in_threadgroup]]
, threadgroup metal::atomic_uint& a
) {
    if (metal::all(__local_invocation_id == metal::uint3(0u))) {
        metal::atomic_store_explicit(&a, 0, metal::memory_order_relaxed);
    }
    metal::threadgroup_barrier(metal::mem_flags::mem_threadgroup);
    _atomic_compare_exchange_resultUint4_ _e5 = metal::atomic_naga_atomic_compare_exchange_weak_explicit(&a, &2u, 1u, metal::memory_order_relaxed);
    return;
}
